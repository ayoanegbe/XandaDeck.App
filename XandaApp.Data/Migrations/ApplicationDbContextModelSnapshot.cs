// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using XandaApp.Data.Context;

namespace XandaApp.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.22");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("XandaApp.Data.Models.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("DeviceOfflineNotice")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("DeviceOnlineNotice")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DeviceQuota")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Devices")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasMaxLength(30);

                    b.Property<bool>("NewLocationLoginNotice")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OnlineDevices")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RegisteredDevices")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Subscription")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Use2FA")
                        .HasColumnType("INTEGER");

                    b.HasKey("AccountId");

                    b.ToTable("Account");
                });

            modelBuilder.Entity("XandaApp.Data.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AccounId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("DeviceLogin")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LastLogin")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("XandaApp.Data.Models.Device", b =>
                {
                    b.Property<int>("DeviceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("APN")
                        .HasColumnType("TEXT")
                        .HasMaxLength(20);

                    b.Property<int>("AccountId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("AdvancedConfig")
                        .HasColumnType("TEXT")
                        .HasMaxLength(255);

                    b.Property<string>("Checksum")
                        .HasColumnType("TEXT")
                        .HasMaxLength(9);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DonglePassword")
                        .HasColumnType("TEXT")
                        .HasMaxLength(20);

                    b.Property<string>("DongleUsername")
                        .HasColumnType("TEXT")
                        .HasMaxLength(20);

                    b.Property<bool>("EnableProxy")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EnableWiFi")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Enabled")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("GoogleDNS")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LANDNS")
                        .HasColumnType("TEXT")
                        .HasMaxLength(15);

                    b.Property<string>("LANGateway")
                        .HasColumnType("TEXT")
                        .HasMaxLength(15);

                    b.Property<string>("LANIPAddress")
                        .HasColumnType("TEXT")
                        .HasMaxLength(15);

                    b.Property<string>("LANNetmask")
                        .HasColumnType("TEXT")
                        .HasMaxLength(15);

                    b.Property<string>("LANSecondaryDNS")
                        .HasColumnType("TEXT")
                        .HasMaxLength(15);

                    b.Property<bool>("LANStaticConfig")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("LastOnline")
                        .HasColumnType("TEXT");

                    b.Property<string>("NTPServers")
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasMaxLength(30);

                    b.Property<bool>("NetworkHidden")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Online")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Registered")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RegistrationCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("SIMPin")
                        .HasColumnType("TEXT")
                        .HasMaxLength(4);

                    b.Property<int>("ScheduleId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ScreenShotURL")
                        .HasColumnType("TEXT")
                        .HasMaxLength(255);

                    b.Property<bool>("UseDongle")
                        .HasColumnType("INTEGER");

                    b.Property<string>("WiFiDNS")
                        .HasColumnType("TEXT")
                        .HasMaxLength(15);

                    b.Property<string>("WiFiGateway")
                        .HasColumnType("TEXT")
                        .HasMaxLength(15);

                    b.Property<string>("WiFiIPAddress")
                        .HasColumnType("TEXT")
                        .HasMaxLength(15);

                    b.Property<string>("WiFiKey")
                        .HasColumnType("TEXT")
                        .HasMaxLength(30);

                    b.Property<int>("WiFiMode")
                        .HasColumnType("INTEGER");

                    b.Property<string>("WiFiNetmask")
                        .HasColumnType("TEXT")
                        .HasMaxLength(15);

                    b.Property<string>("WiFiNetworkName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(30);

                    b.Property<string>("WiFiPassword")
                        .HasColumnType("TEXT")
                        .HasMaxLength(20);

                    b.Property<string>("WiFiSecondaryDNS")
                        .HasColumnType("TEXT")
                        .HasMaxLength(15);

                    b.Property<bool>("WiFiStaticConfig")
                        .HasColumnType("INTEGER");

                    b.Property<string>("WiFiUsername")
                        .HasColumnType("TEXT")
                        .HasMaxLength(30);

                    b.HasKey("DeviceId");

                    b.HasIndex("AccountId");

                    b.HasIndex("ScheduleId");

                    b.ToTable("Device");
                });

            modelBuilder.Entity("XandaApp.Data.Models.EmailSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CcEmail")
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Host")
                        .HasColumnType("TEXT");

                    b.Property<string>("HostIP")
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT");

                    b.Property<string>("PortNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("EmailSettings");
                });

            modelBuilder.Entity("XandaApp.Data.Models.Media", b =>
                {
                    b.Property<int>("MediaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccountId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("Duration")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Path")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT")
                        .HasMaxLength(30);

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("MediaId");

                    b.HasIndex("AccountId");

                    b.ToTable("Media");
                });

            modelBuilder.Entity("XandaApp.Data.Models.Schedule", b =>
                {
                    b.Property<int>("ScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccountId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(30);

                    b.HasKey("ScheduleId");

                    b.HasIndex("AccountId");

                    b.ToTable("Schedule");
                });

            modelBuilder.Entity("XandaApp.Data.Models.ScheduleItem", b =>
                {
                    b.Property<int>("ScheduleItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Content")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("FirstStart")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("FirstStop")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("Forever")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Frequency")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("Friday")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("Monday")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("RepeatUnitl")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("Saturday")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ScheduleId")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("Sunday")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("Thursday")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("Tuesday")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("Wednesday")
                        .HasColumnType("INTEGER");

                    b.HasKey("ScheduleItemId");

                    b.HasIndex("ScheduleId");

                    b.ToTable("ScheduleItem");
                });

            modelBuilder.Entity("XandaApp.Data.Models.SmtpConfig", b =>
                {
                    b.Property<int>("SmtpSettingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Host")
                        .HasColumnType("TEXT");

                    b.Property<string>("HostIP")
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT");

                    b.Property<string>("PortNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT");

                    b.HasKey("SmtpSettingId");

                    b.ToTable("SmtpConfig");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("XandaApp.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("XandaApp.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("XandaApp.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("XandaApp.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("XandaApp.Data.Models.ApplicationUser", b =>
                {
                    b.OwnsMany("XandaApp.Data.Models.RefreshToken", "RefreshTokens", b1 =>
                        {
                            b1.Property<string>("ApplicationUserId")
                                .HasColumnType("TEXT");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("INTEGER");

                            b1.Property<DateTime>("Created")
                                .HasColumnType("TEXT");

                            b1.Property<DateTime>("Expires")
                                .HasColumnType("TEXT");

                            b1.Property<DateTime?>("Revoked")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Token")
                                .HasColumnType("TEXT");

                            b1.HasKey("ApplicationUserId", "Id");

                            b1.ToTable("RefreshToken");

                            b1.WithOwner()
                                .HasForeignKey("ApplicationUserId");
                        });
                });

            modelBuilder.Entity("XandaApp.Data.Models.Device", b =>
                {
                    b.HasOne("XandaApp.Data.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("XandaApp.Data.Models.Schedule", "Schedule")
                        .WithMany()
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("XandaApp.Data.Models.Media", b =>
                {
                    b.HasOne("XandaApp.Data.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("XandaApp.Data.Models.Schedule", b =>
                {
                    b.HasOne("XandaApp.Data.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("XandaApp.Data.Models.ScheduleItem", b =>
                {
                    b.HasOne("XandaApp.Data.Models.Schedule", "Schedule")
                        .WithMany()
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
